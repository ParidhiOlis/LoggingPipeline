name: Logging Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'LoggingPipeline/**'
      - 'app/logging_*.py'
      - 'app/log_rotation.py'
      - 'app/logging_config.py'
      - 'tests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'LoggingPipeline/**'
      - 'app/logging_*.py'
      - 'app/log_rotation.py'
      - 'app/logging_config.py'
      - 'tests/**'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:latest
        ports:
          - 8123:8123
        env:
          CLICKHOUSE_DB: logs
          CLICKHOUSE_USER: default
          CLICKHOUSE_PASSWORD: ''
          CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort mypy clickhouse-driver
    
    - name: Run tests
      env:
        CLICKHOUSE_HOST: localhost
        CLICKHOUSE_PORT: 8123
        CLICKHOUSE_DB: logs
        CLICKHOUSE_USER: default
        CLICKHOUSE_PASSWORD: ''
      run: |
        python -m pytest tests/ -v --cov=LoggingPipeline --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Lint with black
      run: |
        black --check LoggingPipeline/ tests/ app/logging_*.py
    
    - name: Check import order with isort
      run: |
        isort --check-only LoggingPipeline/ tests/ app/logging_*.py
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports LoggingPipeline/ app/logging_*.py

  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to staging
      env:
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        HOST: ${{ secrets.STAGING_HOST }}
        USER: ${{ secrets.STAGING_USER }}
      run: |
        # Add your deployment script here
        echo "Deploying to staging..."
        # Example: rsync -avz -e "ssh -i $DEPLOY_KEY" --exclude='.git' ./ $USER@$HOST:/path/to/staging

  deploy-prod:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to production
      env:
        DEPLOY_KEY: ${{ secrets.PROD_DEPLOY_KEY }}
        HOST: ${{ secrets.PROD_HOST }}
        USER: ${{ secrets.PROD_USER }}
      run: |
        # Add your production deployment script here
        echo "Deploying to production..."
        # Example: rsync -avz -e "ssh -i $DEPLOY_KEY" --exclude='.git' ./ $USER@$HOST:/path/to/production

  log-rotation:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run log rotation
      env:
        CLICKHOUSE_HOST: ${{ secrets.CLICKHOUSE_HOST }}
        CLICKHOUSE_PORT: ${{ secrets.CLICKHOUSE_PORT }}
        CLICKHOUSE_DB: ${{ secrets.CLICKHOUSE_DB }}
        CLICKHOUSE_USER: ${{ secrets.CLICKHOUSE_USER }}
        CLICKHOUSE_PASSWORD: ${{ secrets.CLICKHOUSE_PASSWORD }}
      run: |
        python app/log_rotation.py
